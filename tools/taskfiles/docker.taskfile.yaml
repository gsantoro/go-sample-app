version: '3'

# Docker
# ----------------------------------------------------------------
#
# note: run from ../Taskfile.yaml

includes:
  go: 
    taskfile: ./go.taskfile.yaml
    dir: "../.."
    internal: true


tasks:
  env:
    cmds:
      - cat {{.ENV_FILE}}
      - source {{.ENV_FILE}} && zsh
    vars:
      ENV_FILE: .env.docker

  build:
    cmds:
      - docker build -t {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}} -f {{.DOCKER_FILE}} .
    vars:
      DOCKER_IMAGE:
        sh: echo $DOCKER_IMAGE
      DOCKER_TAG:
        sh: echo $DOCKER_TAG
      DOCKER_FILE:
        sh: echo $DOCKER_FILE

  build-test:
    cmds:
      - docker build -t {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}} -f {{.DOCKER_FILE}} .
    vars:
      DOCKER_IMAGE:
        sh: echo $DOCKER_IMAGE
      DOCKER_TAG:
        sh: echo $DOCKER_TAG
      DOCKER_FILE: deployments/docker/Test.Dockerfile

  run:
    cmds: 
      - docker run -it {{.PARAMS}} {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}} 
    vars:
      PARAMS: "-p $PORT:$PORT --env-file .env.docker"
      DOCKER_IMAGE:
        sh: echo $DOCKER_IMAGE
      DOCKER_TAG:
        sh: echo $DOCKER_TAG

  # Note: requires `dev` instead of `up` since we want to open a bash terminal and distroless image (from `up` doesn't have a terminal)
  shell:
    cmds:
      - docker exec -it {{.DOCKER_ID}} /bin/bash
    vars:
      DOCKER_IMAGE: 
        sh: echo $DOCKER_IMAGE
      DOCKER_ID:
        sh: docker ps --filter ancestor={{.DOCKER_IMAGE}} --format '{{`{{.Names}}`}}'

  up:
    env:
      GOOS: test
    cmds:
      - task: go:build
      - task: build
      - task: run

  dev:
    env:
      GOOS: test
    cmds:
      - task: go:build
      - task: build-test
      - task: run

  ping:
    cmds:
      - curl http://{{.HOSTNAME}}:{{.PORT}}/api/v1/ping
    vars:
      HOSTNAME:
        sh: echo $HOSTNAME
      PORT:
        sh: echo $PORT

  ## ttl temp registry
  ttl-sh-dive:
    cmds:
      - task: login
      - dive ttl.sh/{{.DOCKER_IMAGE}}:{{.DOCKER_TMP_REPO_TTL}}

  ttl-sh-push:
    cmds:
      - docker build -t ttl.sh/{{.DOCKER_IMAGE}}:{{.DOCKER_TMP_REPO_TTL}} -f {{.DOCKER_FILE}} .
      - docker push ttl.sh/{{.DOCKER_IMAGE}}:{{.DOCKER_TMP_REPO_TTL}}

  # tools
  login:
    cmds:
      - docker login

  dive:
    cmds:
      - task: login
      - dive {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}}

  check:
    cmds:
      - task: scan
      - task: trivy-scan

  scan:
    cmds: 
      - docker scout cves {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}}

  trivy-scan:
    cmds:
      - trivy image {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}}

  slim:
    cmds:
      # NOTE: if docker context point to remote host, this command doesn't work
      # it needs to be run from remote host. Image will be available locally after build
      - slim build --env PORT={{.PORT}} --expose 8080 {{.DOCKER_IMAGE}}:{{.DOCKER_TAG}}